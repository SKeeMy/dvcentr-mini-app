'use client'
import './styles/global.scss'
import { useEffect, useState } from 'react'
import { Container } from '@/components/container/container'
import clsx from 'clsx'
import Link from 'next/link'
import { Orders } from '@/components/pages/home/orders/orders'
import { IApiResponse, IOrderData } from '@/components/pages/home/orders/orders.interface'
import { ButtonClose } from '@/components/shared/buttons/button-close'
import { Close } from '@/components/shared/icons/close'
import { init, requestContact, initData } from '@telegram-apps/sdk';

interface UserData {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code: string
  is_premium?: boolean
  phone?: string
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockUsers: UserData[] = [
  {
    id: 123456789,
    first_name: "–ê–Ω–Ω–∞",
    last_name: "–ò–≤–∞–Ω–æ–≤–∞",
    username: "anna_ivanova",
    language_code: "ru",
    is_premium: true,
    phone: "+79147275655"
  },
  {
    id: 987654321,
    first_name: "–î–º–∏—Ç—Ä–∏–π",
    last_name: "–ü–µ—Ç—Ä–æ–≤",
    username: "dmitry_petrov",
    language_code: "ru",
    is_premium: false,
    phone: "+79147275656"
  }
]

export default function Home() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [currentMockIndex, setCurrentMockIndex] = useState(0)
  const [data, setData] = useState<IApiResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [openPopup, setOpenPopup] = useState<boolean>(false)
  const [isTelegramEnv, setIsTelegramEnv] = useState(false)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @telegram-apps/sdk
  const requestPhoneNumber = async () => {
    console.log('=== –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å requestContact.isAvailable()...');
    const isAvailable = requestContact.isAvailable();
    console.log('   requestContact.isAvailable() =', isAvailable);
    console.log('   –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', typeof isAvailable);
    
    try {
      if (isAvailable) {
        console.log('2. requestContact –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
        
        console.log('3. –í—ã–∑—ã–≤–∞–µ–º requestContact()...');
        const contactData = await requestContact();
        console.log('4. requestContact() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');
        console.log('   –¢–∏–ø contactData:', typeof contactData);
        console.log('   contactData:', contactData);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
        if (contactData) {
          console.log('5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É contactData:');
          console.log('   - contactData.contact:', contactData.contact);
          console.log('   - contactData.auth_date:', contactData.auth_date);
          console.log('   - contactData.hash:', contactData.hash);
          
          if (contactData.contact) {
            console.log('6. –î–µ—Ç–∞–ª–∏ contactData.contact:');
            console.log('   - user_id:', contactData.contact.user_id);
            console.log('   - phone_number:', contactData.contact.phone_number);
            console.log('   - first_name:', contactData.contact.first_name);
            console.log('   - last_name:', contactData.contact.last_name);
          } else {
            console.log('6. contactData.contact –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          }
        } else {
          console.log('5. contactData –ø—É—Å—Ç–æ–π –∏–ª–∏ undefined');
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ alert
        console.log('7. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è alert...');
        const formattedContact = JSON.stringify(contactData, null, 2);
        console.log('   formattedContact:', formattedContact);

        // –í—ã–≤–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –≤ alert
        console.log('8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞...');
        alert(`–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:\n${formattedContact}`);

        console.log('9. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (contactData.contact) {
          console.log('   - contactData.contact —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º userData');
          setUserData(prev => {
            const newUserData = prev ? {
              ...prev,
              phone: contactData.contact.phone_number,
              first_name: contactData.contact.first_name || prev.first_name,
              last_name: contactData.contact.last_name || prev.last_name
            } : null;
            console.log('   - –ù–æ–≤—ã–π userData:', newUserData);
            return newUserData;
          });
        } else {
          console.log('   - contactData.contact –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        }

        console.log('10. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º contactData');
        return contactData;
      } else {
        console.log('2. requestContact –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
        console.log('3. –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const mockContact = {
          contact: {
            user_id: mockUsers[currentMockIndex]?.id || 123456789,
            phone_number: mockUsers[currentMockIndex]?.phone || '+79147275655',
            first_name: mockUsers[currentMockIndex]?.first_name || 'Mock',
            last_name: mockUsers[currentMockIndex]?.last_name || 'User'
          },
          auth_date: new Date(),
          hash: 'mock_hash_' + Date.now()
        };
        
        console.log('4. –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:', mockContact);
        
        console.log('5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è alert...');
        const formattedMockContact = JSON.stringify(mockContact, null, 2);
        console.log('   formattedMockContact:', formattedMockContact);
        
        console.log('6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π alert...');
        alert('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏');

        console.log('7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        alert(`–ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (requestContact –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω):\n${formattedMockContact}`);

        console.log('8. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mockContact');
        return mockContact;
      }
    } catch (error) {
      console.error('=== –û–®–ò–ë–ö–ê –í –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');
      console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
      
      console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å –æ—à–∏–±–∫–æ–π...');
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${error.message}`);
      
      console.log('–ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
      return null;
    } finally {
      console.log('=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');
    }
  };

  useEffect(() => {
    const initializeWebApp = async () => {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp —Å @telegram-apps/sdk...');
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp...');
        init();
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log('2. –ü–æ–ª—É—á–∞–µ–º initData...');
        //@ts-ignore
        const initDataValue = initData();
        console.log('   initData:', initDataValue);
        console.log('   initData.state:', initDataValue?.state);
        console.log('   initData.user:', initDataValue?.user);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ Telegram
        const isInTelegram = !!initDataValue?.user;
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram:', isInTelegram);
        setIsTelegramEnv(isInTelegram);

        if (initDataValue?.user) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          const user = initDataValue.user as UserData;
          setUserData(user);
          console.log('   User data:', user);
        } else {
          console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          const mockUser = mockUsers[currentMockIndex];
          setUserData(mockUser);
          console.log('   Mock user:', mockUser);
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:', error);
        const mockUser = mockUsers[currentMockIndex];
        setUserData(mockUser);
        setIsTelegramEnv(false);
      } finally {
        console.log('‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...');
        setTimeout(() => {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, isLoading = false');
          setIsLoading(false);
        }, 1000);
      }
    };

    initializeWebApp();
  }, [currentMockIndex]);

  // useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (!isLoading && userData) {
      console.log('üèóÔ∏è useEffect: –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å...');
      console.log('isTelegramEnv:', isTelegramEnv);
      console.log('userData:', userData);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏
      if (isTelegramEnv) {
        const timer = setTimeout(() => {
          console.log('‚è∞ –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑—ã–≤–∞–µ–º requestPhoneNumber...');
          requestPhoneNumber();
        }, 1500);
        
        return () => {
          console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞...');
          clearTimeout(timer);
        };
      } else {
        // –ï—Å–ª–∏ –Ω–µ –≤ Telegram, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const timer = setTimeout(() => {
          console.log('üåê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤–Ω–µ Telegram...');
          alert(
            '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram.\n\n' +
            '–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ' +
            '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.'
          );
        }, 1000);
        
        return () => {
          console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞...');
          clearTimeout(timer);
        };
      }
    }
  }, [isLoading, userData, isTelegramEnv]);

  const sendPhoneRequest = async () => {
    console.log('üìû –í—ã–∑–æ–≤ sendPhoneRequest...');
    setOpenPopup(true);
    setError(null);
    
    if (data === null) {
      setLoading(true);

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        console.log('1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...');
        const contactData = await requestPhoneNumber();
        const phoneToSend = contactData?.contact?.phone_number || userData?.phone || '79147275655';
        console.log('   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –Ω–æ–º–µ—Ä:', phoneToSend);

        console.log('2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
        const response = await fetch('/api/tg-react-app', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Forwarded-Proto': 'https',
            'X-Forwarded-Ssl': 'on',
            'HTTPS': 'YES',
            'X-Requested-With': 'XMLHttpRequest',
          },
          body: JSON.stringify({
            phone: phoneToSend
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('3. API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', result);
        setData(result);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPhoneRequest:', err);
        setError(err.message);
      } finally {
        setLoading(false);
        console.log('‚úÖ sendPhoneRequest –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } else {
      console.log('üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup');
      setOpenPopup(true);
    }
  };

  if (isLoading) {
    return (
      <Container>
        <div className="loading-container">
          <div className="telegram-loader">
            <div className="telegram-loader__spinner"></div>
            <p className="telegram-loader__text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </Container>
    )
  }

  if (!userData) {
    return (
      <Container>
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h2 className="error-title">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
          <p className="error-description">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
          </p>
        </div>
      </Container>
    )
  }

  return (
    <Container>
      <div className="app-container">
        <div
          className={clsx('popup-overlay', openPopup && 'visible')}
          onClick={() => setOpenPopup(false)}
        >
          <div
            className={clsx('popup', openPopup && 'visible')}
          >
            <div className='popup_inner'>
              <ButtonClose aria-label='Close dialog' className='popup__close-btn' onClose={() => setOpenPopup(false)}>
                <Close />
              </ButtonClose>
              <span className='popup__line'></span>
              <div className='popup_content_wrapper'>
                <div className="popup__data">
                  <div>
                    <span className="popup__desc">
                      {userData?.phone || '–ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω'}
                    </span>
                    <p className='popup__title'>–¢–µ–ª–µ—Ñ–æ–Ω</p>
                  </div>
                  {data && <div>
                    <span className="popup__desc">{data.DATA.Data.length}</span>
                    <p className='popup__title'>–î–æ—Å—Ç—É–ø–Ω–æ</p>
                  </div>}
                </div>
              </div>
              {data && data.DATA.Data.map((order, index) => (
                <Orders
                  key={`${order.SalesId}-${index}`}
                  orderData={order}
                  loading={loading}
                />
              ))}

              {data === null && loading &&
                <Orders
                  orderData={null}
                  loading={loading}
                />
              }
            </div>
          </div>
        </div>

        {/* Header */}
        <header className="app-header">
          <div className="header-content">
            <h1 className="app-title">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, DVCENTR.RU!üëã</h1>
            <p className="app-subtitle">–ù–∞—à–µ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
          </div>
          <div className="header-decoration">
            <div className="decoration-circle circle-1"></div>
            <div className="decoration-circle circle-2"></div>
          </div>
        </header>

        {/* User Profile Card */}
        <div className="profile-card">
          <div className="profile-header">
            <div className="avatar-container">
              <div
                className="user-avatar"
                style={{
                  background: `linear-gradient(135deg, #${userData.id.toString().slice(0, 6)}, #${userData.id.toString().slice(3, 9)})`
                }}
              >
                {userData.first_name[0]}{userData.last_name?.[0] || ''}
              </div>
              {userData.is_premium && (
                <div className="premium-badge">‚≠ê</div>
              )}
            </div>
            <div className="user-info">
              <h2 className="user-name">
                {userData.first_name} {userData.last_name || ''}
              </h2>
              {userData.username && (
                <p className="user-username">@{userData.username}</p>
              )}
              <div className="user-id">ID: {userData.id}</div>
              {userData.phone && (
                <div className="user-phone">üì± {userData.phone}</div>
              )}
            </div>
          </div>

          <div className="profile-stats">
            <div className="stat-item">
              <div className="stat-value">{userData.id.toString().slice(0, 3)}</div>
              <div className="stat-label">–ü—Ä–µ—Ñ–∏–∫—Å</div>
            </div>
            <div className="stat-item">
              <div className="stat-value">{userData.language_code.toUpperCase()}</div>
              <div className="stat-label">–Ø–∑—ã–∫</div>
            </div>
            <div className="stat-item">
              <div className="stat-value">
                {userData.is_premium ? 'Yes' : 'No'}
              </div>
              <div className="stat-label">Premium</div>
            </div>
          </div>
        </div>

        <Link href={'/catalog'} className="action-button primary">
          –ö–∞—Ç–∞–ª–æ–≥
        </Link>

        {/* Features Grid */}
        <div className="features-grid">
          <div className="feature-card">
            <div className="feature-icon">üöÄ</div>
            <h3 className="feature-title">–ë—ã—Å—Ç—Ä–æ</h3>
            <p className="feature-description">–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">üîí</div>
            <h3 className="feature-title">–ë–µ–∑–æ–ø–∞—Å–Ω–æ</h3>
            <p className="feature-description">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</p>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="actions-container">
          <button onClick={sendPhoneRequest} className="action-button primary">
            –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
          <button onClick={requestPhoneNumber} className="action-button secondary">
            –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          </button>
        </div>
      </div>
    </Container>
  )
}