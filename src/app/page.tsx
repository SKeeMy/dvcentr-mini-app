'use client'
import './styles/global.scss'
import { useEffect, useRef, useState } from 'react'
import { Container } from '@/components/container/container'
import clsx from 'clsx'
import Link from 'next/link'
interface UserData {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code: string
  is_premium?: boolean
}



// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockUsers: UserData[] = [
  {
    id: 123456789,
    first_name: "–ê–Ω–Ω–∞",
    last_name: "–ò–≤–∞–Ω–æ–≤–∞",
    username: "anna_ivanova",
    language_code: "ru",
    is_premium: true
  },
  {
    id: 987654321,
    first_name: "–î–º–∏—Ç—Ä–∏–π",
    last_name: "–ü–µ—Ç—Ä–æ–≤",
    username: "dmitry_petrov",
    language_code: "ru",
    is_premium: false
  },
  {
    id: 555555555,
    first_name: "Maria",
    last_name: "Johnson",
    username: "maria_j",
    language_code: "en",
    is_premium: true
  },
  {
    id: 111111111,
    first_name: "Alex",
    username: "alex_tech",
    language_code: "en",
    is_premium: false
  }
]

export default function Home() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [currentMockIndex, setCurrentMockIndex] = useState(0)
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [openPopup, setOpenPopup] = useState<boolean>(false)

  const [popupPosition, setPopupPosition] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const popupRef = useRef<HTMLDivElement>(null);
  const startYRef = useRef(0);
  const currentYRef = useRef(0);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–µ—Å—Ç–æ–≤
  const handleTouchStart = (e: React.TouchEvent) => {
    const touch = e.touches[0];
    startYRef.current = touch.clientY;
    currentYRef.current = touch.clientY;
    setIsDragging(true);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging || !popupRef.current) return;

    const touch = e.touches[0];
    currentYRef.current = touch.clientY;

    const deltaY = currentYRef.current - startYRef.current;

    // –£–º–µ–Ω—å—à–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –¥–µ–ª–∏–º –Ω–∞ 2
    if (deltaY > 0) {
      const popupHeight = popupRef.current.offsetHeight;
      const position = Math.min(deltaY / popupHeight, 1);
      setPopupPosition(position * 0.5); // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –º–µ–Ω—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    }
  };

  const handleTouchEnd = () => {
    setIsDragging(false);

    const deltaY = currentYRef.current - startYRef.current;
    const popupHeight = popupRef.current?.offsetHeight || 0;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ 40% –≤—ã—Å–æ—Ç—ã –ø–æ–ø–∞–ø–∞
    if (deltaY > popupHeight * 0.4) {
      setOpenPopup(false);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => setPopupPosition(0), 50);
  };
  const sendPhoneRequest = async () => {
    setLoading(true);
    setError(null);
    if (data === null) {
      try {
        const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://dvcentr.ru/api/tg-react-app/';

        const response = await fetch(proxyUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Forwarded-Proto': 'https',
            'X-Forwarded-Ssl': 'on',
            'HTTPS': 'YES',
            'X-Requested-With': 'XMLHttpRequest',
          },
          body: JSON.stringify({
            phone: '79147275655'
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        setData(result);
        setOpenPopup(true)
        console.log('test', data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    } else {
      setOpenPopup(true)
    }

  };

  useEffect(() => {
    const initializeWebApp = async () => {
      try {
        const WebApp = (await import('@twa-dev/sdk')).default

        if (WebApp.initDataUnsafe.user) {
          setUserData(WebApp.initDataUnsafe.user as UserData)
          console.log('Using real Telegram user data')
        } else {
          const mockUser = mockUsers[currentMockIndex]
          setUserData(mockUser)
          console.log('Using mock user data:', mockUser)
        }
      } catch (error) {
        console.log('Error loading Telegram SDK, using mock data')
        const mockUser = mockUsers[currentMockIndex]
        setUserData(mockUser)
      } finally {
        setTimeout(() => {
          setIsLoading(false)
        }, 1000)
      }
    }

    initializeWebApp()
  }, [currentMockIndex])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  const switchMockUser = () => {
    setIsLoading(true)
    setTimeout(() => {
      const nextIndex = (currentMockIndex + 1) % mockUsers.length
      setCurrentMockIndex(nextIndex)
      setUserData(mockUsers[nextIndex])
      setIsLoading(false)
    }, 500)
  }

  if (isLoading) {
    return (
      <Container>
        <div className="loading-container">
          <div className="telegram-loader">
            <div className="telegram-loader__spinner"></div>
            <p className="telegram-loader__text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </Container>
    )
  }

  if (!userData) {
    return (
      <Container>
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h2 className="error-title">–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
          <p className="error-description">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
          </p>
          <button className="demo-button" onClick={switchMockUser}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–µ–º–æ —Ä–µ–∂–∏–º
          </button>
        </div>
      </Container>
    )
  }

  return (
    <Container>
      <div className="app-container">
        <div
          className={clsx('popup-overlay', openPopup && 'visible')}
          onClick={() => setOpenPopup(false)}
        >
          <div
            ref={popupRef}
            className={clsx('popup', openPopup && 'visible', isDragging && 'dragging')}
            style={{
              transform: `translateY(calc(${popupPosition * 100}% + ${popupPosition * 20}px))`
            }}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
            onClick={(e) => e.stopPropagation()}
          >
            <div className='popup_inner'>
              <span
                className='popup__line'
                onMouseDown={(e) => {
                  // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –¥—Ä–∞–≥
                  e.preventDefault();
                  startYRef.current = e.clientY;
                  currentYRef.current = e.clientY;
                  setIsDragging(true);
                }}
              ></span>
              <div className='popup_content_wrapper'>
                <div className="popup__data">
                  <div>
                    <span className="popup__desc">79147275655</span>
                    <p className='popup__title'>–¢–µ–ª–µ—Ñ–æ–Ω</p>
                  </div>
                  <div>
                    <span className="popup__desc">3</span>
                    <p className='popup__title'>–ó–∞–∫–∞–∑–æ–≤ –∫–æ–ª-–≤–æ</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Header */}
        <header className="app-header">
          <div className="header-content">
            <h1 className="app-title">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, DVCENTR.RU!üëã</h1>
            <p className="app-subtitle">–ù–∞—à–µ –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
          </div>
          <div className="header-decoration">
            <div className="decoration-circle circle-1"></div>
            <div className="decoration-circle circle-2"></div>
          </div>
        </header>

        {/* User Profile Card */}
        <div className="profile-card">
          <div className="profile-header">
            <div className="avatar-container">
              <div
                className="user-avatar"
                style={{
                  background: `linear-gradient(135deg, #${userData.id.toString().slice(0, 6)}, #${userData.id.toString().slice(3, 9)})`
                }}
              >
                {userData.first_name[0]}{userData.last_name?.[0] || ''}
              </div>
              {userData.is_premium && (
                <div className="premium-badge">‚≠ê</div>
              )}
            </div>
            <div className="user-info">
              <h2 className="user-name">
                {userData.first_name} {userData.last_name || ''}
              </h2>
              {userData.username && (
                <p className="user-username">@{userData.username}</p>
              )}
              <div className="user-id">ID: {userData.id}</div>
            </div>
          </div>

          <div className="profile-stats">
            <div className="stat-item">
              <div className="stat-value">{userData.id.toString().slice(0, 3)}</div>
              <div className="stat-label">–ü—Ä–µ—Ñ–∏–∫—Å</div>
            </div>
            <div className="stat-item">
              <div className="stat-value">{userData.language_code.toUpperCase()}</div>
              <div className="stat-label">–Ø–∑—ã–∫</div>
            </div>
            <div className="stat-item">
              <div className="stat-value">
                {userData.is_premium ? 'Yes' : 'No'}
              </div>
              <div className="stat-label">Premium</div>
            </div>
          </div>
        </div>
        <Link href={'/catalog'} className="action-button primary">
          –ö–∞—Ç–∞–ª–æ–≥
        </Link>

        {/* User Stats */}


        {/* Features Grid */}
        <div className="features-grid">
          <div className="feature-card">
            <div className="feature-icon">üöÄ</div>
            <h3 className="feature-title">–ë—ã—Å—Ç—Ä–æ</h3>
            <p className="feature-description">–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞</p>
          </div>
          <div className="feature-card">
            <div className="feature-icon">üîí</div>
            <h3 className="feature-title">–ë–µ–∑–æ–ø–∞—Å–Ω–æ</h3>
            <p className="feature-description">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</p>
          </div>

        </div>

        {/* Action Buttons */}
        <div className="actions-container">
          <button onClick={sendPhoneRequest} className="action-button primary">
            –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É
          </button>

        </div>
      </div>
    </Container>
  )
}