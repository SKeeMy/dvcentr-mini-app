'use client'
import './styles/global.scss'
import { useEffect, useState } from 'react'
import { Container } from '@/components/container/container'
import clsx from 'clsx'
import Link from 'next/link'
import { Orders } from '@/components/pages/home/orders/orders'
import { IApiResponse, IOrderData } from '@/components/pages/home/orders/orders.interface'
import { ButtonClose } from '@/components/shared/buttons/button-close'
import { Close } from '@/components/shared/icons/close'
import { init, requestContact, initData, viewport, isTMA } from '@telegram-apps/sdk';
import { BannerSlider } from '@/components/pages/banner-slider/banner-slider'
import { Section } from '@/components/section/section'

interface UserData {
  id: number
  first_name: string
  last_name?: string
  username?: string
  language_code: string
  is_premium?: boolean
  phone?: string
}


export default function Home() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [data, setData] = useState<IApiResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [openPopup, setOpenPopup] = useState<boolean>(false)
  const [isTelegramEnv, setIsTelegramEnv] = useState(false)
  const [accessGranted, setAccessGranted] = useState(false)

  const requestPhoneNumber = async () => {
    console.log('=== –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');

    try {
      console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å requestContact.isAvailable()...');
      const isAvailable = requestContact.isAvailable();
      console.log('   requestContact.isAvailable() =', isAvailable);

      if (isAvailable) {
        console.log('2. requestContact –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞...');

        console.log('3. –í—ã–∑—ã–≤–∞–µ–º requestContact()...');
        const contactData = await requestContact();
        console.log('4. requestContact() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ');

        if (contactData && contactData.contact) {
          console.log('5. –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω:', contactData.contact.phone_number);

          const updatedUserData = {
            id: contactData.contact.user_id,
            first_name: contactData.contact.first_name || 'User',
            last_name: contactData.contact.last_name,
            language_code: 'ru',
            phone: contactData.contact.phone_number
          };

          setUserData(updatedUserData);
          setAccessGranted(true);
          console.log('‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Å –Ω–æ–º–µ—Ä–æ–º:', contactData.contact.phone_number);
        }

        return contactData;
      } else {
        console.log('2. requestContact –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏');
        return null;
      }
    } catch (error) {
      console.error('=== –û–®–ò–ë–ö–ê –í –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');
      console.error('–û—à–∏–±–∫–∞:', error);
      return null;
    } finally {
      console.log('=== –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò requestPhoneNumber ===');
    }
  };

  useEffect(() => {
    const initializeWebApp = async () => {
      console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp —Å @telegram-apps/sdk...');
      try {
        console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp...');
        init();
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        console.log('2. –ü–æ–ª—É—á–∞–µ–º initData...');

        //@ts-ignore
        const initDataValue = initData();
        console.log('   initData.user:', initDataValue?.user);

        const isInTelegram = !!initDataValue?.user;
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram:', isInTelegram);
        setIsTelegramEnv(isInTelegram);

        console.log('3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å requestContact.isAvailable()...');
        const isContactAvailable = requestContact.isAvailable();
        console.log('   requestContact.isAvailable() =', isContactAvailable);

        if (initDataValue?.user) {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          const telegramUser = initDataValue.user as UserData;
          setUserData(telegramUser);

          if (isContactAvailable) {
            console.log('üéâ requestContact –¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø');
            setAccessGranted(true);
          }
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram SDK:', error);
        setIsTelegramEnv(false);
      } finally {
        console.log('‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
        setTimeout(() => {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', {
            accessGranted,
            isTelegramEnv,
            userData: userData?.first_name
          });
          setIsLoading(false);
        }, 1000);
      }
    };

    initializeWebApp();
  }, []);

  const sendPhoneRequest = async () => {
    console.log('üìû –í—ã–∑–æ–≤ sendPhoneRequest...');
    setOpenPopup(true);
    setError(null);

    if (data === null) {
      setLoading(true);

      try {
        const phoneToSend = userData?.phone;

        if (!phoneToSend) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }

        console.log('1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –Ω–æ–º–µ—Ä–æ–º:', phoneToSend);
        const response = await fetch('/api/tg-react-app', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Forwarded-Proto': 'https',
            'X-Forwarded-Ssl': 'on',
            'HTTPS': 'YES',
            'X-Requested-With': 'XMLHttpRequest',
          },
          body: JSON.stringify({
            phone: phoneToSend
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('2. API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
        setData(result);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPhoneRequest:', err);
        setError(err.message);
      } finally {
        setLoading(false);
        console.log('‚úÖ sendPhoneRequest –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } else {
      console.log('üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup');
      setOpenPopup(true);
    }
  };

  if (isLoading) {
    return (
      <Container>
        <div className="loading-container">
          <div className="telegram-loader">
            <div className="telegram-loader__spinner"></div>
            <p className="telegram-loader__text">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
      </Container>
    )
  }

  if (accessGranted) {
    return (
      <Container>
        <div className="access-screen">
          {/* Header */}
          

          {/* Access Content */}
          <div className="access-content">
            <div className="access-icon">üîí</div>
            <h2 className="access-title">–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</h2>
            <p className="access-description">
              –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            </p>

            <div className="access-features">
              <div className="access-feature">
                <span className="feature-icon">‚úÖ</span>
                <span className="feature-text">–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø</span>
              </div>
              <div className="access-feature">
                <span className="feature-icon">‚úÖ</span>
                <span className="feature-text">–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</span>
              </div>
              <div className="access-feature">
                <span className="feature-icon">‚úÖ</span>
                <span className="feature-text">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</span>
              </div>
            </div>

            <button
              onClick={requestPhoneNumber}
              className="access-button primary"
            >
               –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º üì± 
            </button>

            <p className="access-note">
              –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ Telegram
            </p>
          </div>
        </div>
      </Container>
    )
  }

  return (
    <Section name={null}>
      <div className="app-container">
        <div
          className={clsx('popup-overlay', openPopup && 'visible')}
          onClick={() => setOpenPopup(false)}
        >
          <div
            className={clsx('popup', openPopup && 'visible')}
          >
            <div className='popup_inner'>
              <ButtonClose aria-label='Close dialog' className='popup__close-btn' onClose={() => setOpenPopup(false)}>
                <Close />
              </ButtonClose>
              <span className='popup__line'></span>
              <div className='popup_content_wrapper'>
                <div className="popup__data">
                  <div>
                    <span className="popup__desc">
                      {userData?.phone || '–ù–æ–º–µ—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω'}
                    </span>
                    <p className='popup__title'>–¢–µ–ª–µ—Ñ–æ–Ω</p>
                  </div>
                  {data && <div>
                    <span className="popup__desc">{data.DATA.Data.length}</span>
                    <p className='popup__title'>–î–æ—Å—Ç—É–ø–Ω–æ</p>
                  </div>}
                </div>
              </div>
              {data && data.DATA.Data.map((order, index) => (
                <Orders
                  key={`${order.SalesId}-${index}`}
                  orderData={order}
                  loading={loading}
                />
              ))}

              {data === null && loading &&
                <Orders
                  orderData={null}
                  loading={loading}
                />
              }
            </div>
          </div>
        </div>

        {/* Header */}
        <BannerSlider />

        {/* User Profile Card */}
        <div className="profile-card">
          <div className="profile-header">
            <div className="avatar-container">
              
              {userData?.is_premium && (
                <div className="premium-badge">‚≠ê</div>
              )}
            </div>
            <div className="user-info">
              <h2 className="user-name">
                {userData?.first_name} {userData?.last_name || ''}
              </h2>
              {userData?.username && (
                <p className="user-username">@{userData.username}</p>
              )}
             
              {userData?.phone && (
                <div className="user-phone">üì± {userData.phone}</div>
              )}
            </div>
          </div>

          <div className="profile-stats">
            <div className="actions-container">
              <button
                onClick={sendPhoneRequest}
                className="action-button primary"
              >
                –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
              </button>
              <button
                onClick={sendPhoneRequest}
                className="action-button primary"
              >
                –ú–æ–∏ –æ—Å—Ç–∞—Ç–∫–∏
              </button>
            </div>
          </div>
        </div>

        <Link href={'/catalog'} className="action-button primary">
          –ö–∞—Ç–∞–ª–æ–≥
        </Link>



        {/* Action Buttons */}
      </div>
    </Section>
  )
}